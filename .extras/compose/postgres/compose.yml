# Copyright (C) 2023 - present Juergen Zimmermann, Hochschule Karlsruhe
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Aufruf:   docker compose up
#           docker compose exec db bash
#             ls
#             id
#           docker compose down

# https://github.com/compose-spec/compose-spec/blob/master/schema/compose-spec.json

services:
  db:
    # https://github.com/docker-library/postgres/blob/master/18/trixie/Dockerfile
    image: postgres:18.0-trixie
    ports:
      - published: 5432
        target: 5432
    # https://dev.to/danvixent/how-to-setup-postgresql-with-ssl-inside-a-docker-container-5f3
    # https://gist.github.com/mrw34/c97bb03ea1054afb551886ffc8b63c3b
    # https://stackoverflow.com/questions/55072221/deploying-postgresql-docker-with-ssl-certificate-and-key-with-volumes
    # ggf. "-c shared_buffers=64MB" statt 128 MB (default bei PostgreSQL 18)
    # ggf. "-c timezone='Europe/Berlin'" (default bei PostgreSQL 18)
    # ggf. "-c max_connections=10" statt 100
    command: >
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/certificate.crt
      -c ssl_key_file=/var/lib/postgresql/key.pem
    volumes:
      - type: bind
        source: C:/Zimmermann/volumes/postgres/data
        target: /var/lib/postgresql/18/docker
        #target: /var/lib/postgresql/data
      - type: bind
        source: C:/Zimmermann/volumes/postgres/tablespace
        target: /var/lib/postgresql/tablespace
      - type: bind
        source: C:/Zimmermann/volumes/postgres/tls/key.pem
        target: /var/lib/postgresql/key.pem
        read_only: true
      - type: bind
        source: C:/Zimmermann/volumes/postgres/tls/certificate.crt
        target: /var/lib/postgresql/certificate.crt
        read_only: true
      - type: bind
        source: C:/Zimmermann/volumes/postgres/run
        # .s.PGSQL.5432.lock
        target: /var/run/postgresql
      - type: bind
        source: C:/Zimmermann/volumes/postgres/csv/fussballverein
        target: /csv
        read_only: true
      - type: bind
        source: C:/Zimmermann/volumes/postgres/sql
        target: /sql
        read_only: true
    # https://docs.docker.com/compose/environment-variables/set-environment-variables
    environment:
      TZ: Europe/Berlin
      PGTZ: Europe/Berlin
      POSTGRES_PASSWORD: p
      #PGDATA: /var/lib/postgresql/data
      # https://www.postgresql.org/docs/current/auth-trust.html
      POSTGRES_HOST_AUTH_METHOD: trust
    networks: [acme-network]
    user: "postgres:postgres"
    hostname: postgres
    container_name: postgres
    security_opt:
      - label:user:postgres
      - no-new-privileges:true
    # https://docs.docker.com/reference/compose-file/services/#cap_drop
    # https://man7.org/linux/man-pages/man7/capabilities.7.html
    cap_drop: [ALL]

    #cap_add: [CHOWN, SETGID, SETUID, DAC_OVERRIDE, NET_BIND_SERVICE, CAP_FOWNER]
    healthcheck:
      test: [CMD, pg_isready, --dbname=postgres, --username=postgres]
      interval: 5s
      timeout: 2s
      start_period: 5s
    restart: unless-stopped
    # https://docs.docker.com/compose/compose-file/deploy
    deploy:
      # https://docs.docker.com/compose/compose-file/deploy/#resources
      resources:
        limits:
          cpus: "2.0"
          memory: 1G
        reservations:
          cpus: "1.0"
          memory: 512M

networks:
  acme-network:
    name: acme-network
